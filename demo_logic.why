theory List
       type list 'a = Nil | Cons 'a (list 'a)

       predicate mem (x: 'a) (l: list 'a) = match l with
       | Nil -> false
       | Cons y r -> x = y \/ mem x r
       end

       goal G1: mem 2 (Cons 1 (Cons 2 (Cons 3 Nil)))
end

theory Length
       use List
       use int.Int

       function length (l: list 'a) : int = match l with
       | Nil -> 0
       | Cons _ r -> length r + 1
       end

       lemma length_nonnegative: forall l:list 'a. length(l) >= 0
 end
 